Selenium tests do not have to be written as JUnit test cases. The @SeleniumAware@ mixin could be applied to almost any test case written in another framework. Page objects are also agnostic of the test framework.

Currently the plugin has tested support for the "Spock":http://grails.org/plugin/spock plugin. Also, when using Grails 1.3+ tests can be written using JUnit 4 conventions. Other testing frameworks such as "EasyB":http://www.easyb.org/ and "JBehave":http://jbehave.org/ may well work with a limited amount of effort.

h3. Writing Selenium tests with JUnit 4

Grails 1.3+ uses JUnit 4 by default and although you can carry on writing tests as before JUnit 4 provides some nice enhancements such as the @assertThat@ method that works the "Hamcrest matcher":http://code.google.com/p/hamcrest/ API.

{code}
import org.junit.*
import grails.plugins.selenium.*
import static org.junit.Assert.*
import static org.hamcrest.CoreMatchers.*

@Mixin(SeleniumAware)
class HomepageTests {
	@Test void userCanLoadHomepage() {
		selenium.open "/"
		assertThat selenium.title, equalTo("Welcome to Grails")
	}
}
{code}
	
Notice that the test annotates each test method with "\@Test":http://www.junit.org/apidocs/org/junit/Test.html and does not extend a base class.

h3. Writing Selenium tests with Spock

To write Selenium tests using Spock, simply create your specifications under @test/selenium@ and (where necessary) use the @SeleniumAware@ mixin then run tests as normal. For example:

{code}
import spock.lang.*
import grails.plugins.selenium.*

@Mixin(SeleniumAware)
class HomepageSpecification extends Specification {
    def "user can load application homepage"() {
        when:
            selenium.open("/")
        then:
            selenium.isTextPresent("Welcome to Grails")
    }
}
{code}

You can isolate Spock Selenium tests with @grails test-app :spock-selenium@ or @grails test-app functional:spock-selenium@ just as you can for other test types.
