Whether using the @SeleniumAware@ mixin in your test cases or extending @GrailsSeleniumTestCase@ your tests interact directly with Selenium. Once you go beyond a handful of simple tests this can make your tests difficult to maintain as they are dealing with the details of the page. Some of the problems with this approach include:
 * Page element locators (whether XPath, CSS, element Ids, etc.) are repeated throughout the tests and therefore require you to hunt out instances if you change the page structure.
 * Multiple Selenium commands representing a single _logical_ action may be repeated in several tests or grouped together into utility classes that can easily get out of control and turn into 'God Objects'.

To truly decouple the functional intent of your tests from the raw Selenium interactions you can write 'page objects'. A page object represents a particular page within your application and defines methods and properties that allow your tests to interact with the page. The tests interact with the page objects, not directly with Selenium so they operate at a layer of abstraction from the fine details of the page. The advantages of this pattern include:
 * Details of page can be refactored more easily as changes only need to be reflected in the page object, not the tests themselves.
 * Complex interactions can be modelled in methods on the page object, meaning they can be reused in multiple tests.
 * Navigation actions can be modelled as page object methods that return instances of other page objects representing the user's journey through the application.
 * Page objects are very easy to write, can be expanded as necessary and greatly enhance the simplicity and readability of your tests.

When using the page object pattern your test classes can simply extend GroovyTestCase as they will typically not interact directly with Selenium. Instead the page object classes themselves will use the @SeleniumAware@ mixin.

h2. Writing page object classes

Page object should not make assertions; that is the job of the test. Page objects are there to provide the data and perform the actions that allow the test to do its job without compromising expressiveness by dealing with the fine details of the page structure or the peculiarities of Selenium.

The only exception to this rule is that constructors or factory methods and navigation methods that return new page objects may do some kind of check to ensure the browser is actually on the page it should be. Typically this is done by checking something simple like the page title and throwing an exception if it is not correct. If the browser ends up on the wrong page the test has made an incorrect assumption about some aspect of navigation so an exception is appropriate.

h3. Observing the state of the page

A page object class typically has methods that observe the state of the page, such as getTitle(), getHighlightedNavigationItem(), isLoginFormVisible(), getErrorMessages(), etc. You implement these by grabbing data from the page using Selenium and converting where necessary into a more logical format for your tests to make assertions about. For example:

{code}
String getFlashMessage() {
	hasFlashMessage() ? selenium.getText("css=.message") : null
}

boolean hasFlashMessage() {
	return selenium.isElementPresent("css=.message")
}
{code}

Here the @hasFlashMessage@ method is used by @getFlashMessage@ to avoid the nasty exception that will get thrown if @getFlashMessage@ attempts to get text on an element that does not exist. As far as the test is concerned if @getFlashMessage@ returns @null@ there was no flash message on the page. However, if that's what is expected it would be inappropriate to throw an exception, catch it in the test and move on. The page object handles the fiddly details of the interaction with Selenium so the test can use assertions such as @assertNull page.flashMessage@ or @assertEquals "Not logged in", page.flashMessage@ that are simple and expressive.

h3. List and table data

Getting data from a list is slightly more complex in Selenium. Again, by encapsulating such things in a page object they don't clutter up your tests. For example:

{code}
List<String> getErrorMessages() {
	def errorCount = selenium.getXpathCount("//div[@class='errors']/ul/li")
	if (errorCount > 0) {
		return (1..errorCount).collect { i ->
			selenium.getText("//div[@class='errors']/ul/li[$i]")
		}
	} else {
		return []
	}
}
{code}

This page object method returns a @List@ of all the error messages displayed on the page, or an empty list if there aren't any error messages. First it counts how many _li_ elements appear inside the 'errors' _div_ using @getXpathCount@ then uses a Groovy range and the @collect@ method to call @getText@ for each _li_ in turn. If the @getXpathCount@ call returned zero the method simply returns an empty list.

The test now doesn't have to worry about how to scrape error messages from the page, it can make nice simple assertions such as @assertTrue page.errorMessages.isEmpty()@ or @assertEquals 1, page.errorMessages.size()@ or @assertThat page.errorMessages, hasItem("Credit card number is invalid")@ which are much easier to read (and write).

One caveat here is that n+1 Selenium commands are executed every time you call @getErrorMessages@ so when dealing with large lists it may be wise to lazy-initialise a private field in the page object the first time the method is called then simply return that value on subsequent calls. Groovy's @Lazy@ annotation can be used to good effect to achieve this.

h3. Interacting with the page

Page objects will also frequently implement methods to allow the test to click buttons, type in fields and so on.

h3. Navigation

Navigation type methods in page objects will typically return another page object. When the navigation in question is deterministic this is as simple as:

{code}
HomePage clickHomeLink() {
	selenium.clickAndWait("css=a#home")
	return new HomePage()
}
{code}

Remember that the constructor of the @HomePage@ class will check that the browser is on the correct page and throw an exception if it isn't.

When navigation can have different results in different circumstances the most effective approach is to implement multiple navigation methods that reflect this. Again, page objects that verify browser state in their constructors make this easy. For example, only a logged in user can click on the "My Profile" link, if a non-logged in user does so they will be presented with the login page rather than their profile:

{code}
ProfilePage clickProfileLinkAsLoggedInUser() {
	selenium.clickAndWait("css=a#profile")
	return new ProfilePage()
}

LoginPage clickProfileLinkAsAnonymousUser() {
	selenium.clickAndWait("css=a#profile")
	return new LoginPage()
}
{code}

Because the test knows the expected state, it can simply call the different methods in different circumstances.

You can consider a page refresh to be a navigation method. For example, if your page object caches the results of various observer methods yet you expect data to change if the page is refreshed then a simple method that calls @selenium.refreshAndWait()@ then returns a new instance of the same page object class would work nicely.

h3. Page object scope

Although the name 'page objects' might encourage you to use a one-class-per-page approach this does not have to be the case. Sometimes it might be appropriate to create a single 'page object' class that actually models a group of pages (e.g. the CRUD pages for a particular domain class).

Likewise, for complex pages or modules that are used on a number of pages you should consider decomposing further to 'module objects'. For example:

{code}
class NavigationModule {
	List<String> getNavigationLinkNames() { ... }
	String getHighlightedNavigationItem() { ... }
	HomePage clickHomeLink() { ... }
	ProfilePage clickUserProfileLink() { ... }
	// etc.
}

class HomePage {
	NavigationModule getNavigationModule() {
		return new NavigationModule()
	}
	// ... other methods for dealing with home page
}

class ProfilePage {
	NavigationModule getNavigationModule() {
		return new NavigationModule()
	}
	// ... other methods for dealing with profile page
}

class NavigationTests {
	@Test whenNavigatingBetweenPagesTheCorrectNavElementIsHighlighted() {
		def homepage = HomePage.open()
		assertThat homepage.navigationModule.highlightedNavigationItem, equalTo("Home")
		
		def profilepage = homepage.navigationModule.clickUserProfileLink()
		assertThat profilepage.navigationModule.hightlightedNavigationItem, equalTo("My Profile")
	}
}
{code}

In this example both the home and profile pages share the same navigation module (perhaps as part of their SiteMesh template), so it makes sense that the code for interacting with that module is split out into its own class to avoid re-implementing all the navigation methods in both.

h2. Page object support in the plugin
The plugin provides some base classes for page objects. These can be used as-is for simple scenarios or extended (or ignored completely of course). All the classes are in the @grails.plugins.selenium.pageobjects@ package. Refer to the API documentation for more details.
 * @Page@ is the root of the page object heirarchy.
 * @GrailsPage@ and @GrailsFormPage@ are extended by classes representing the various typical scaffolding pages.
 * @GrailsListPage@ represents a scaffolded _list_ page and provides easy access to data in a list table, access to the pagination controls, etc.
 * @GrailsShowPage@ represents a scaffolded _show_ page and provides property access to data in a typical _show_ page.
 * @GrailsCreatePage@ and @GrailsEditPage@ represent scaffolded _create_ and _edit_ pages and translate @page.field = "value"@ type calls to Selenium commands that type in form fields.

h3. Extending the plugin's base page object classes
TODO